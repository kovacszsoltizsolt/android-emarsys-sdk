name: Emarsys SDK - Modularized CI

on:
  workflow_dispatch:
#  push:
#    branches: [ master ]

env:
  RELEASE_KEY_PASSWORD:  ${{ secrets.ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD }}
  RELEASE_KEY_ALIAS:  ${{ secrets.ANDROID_KEYSTORE_ALIAS }}
  RELEASE_STORE_PASSWORD:  ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
  RELEASE_STORE_FILE: ${{ secrets.RELEASE_STORE_FILE }}
  DEVELOPMENT_MODE: ${{ secrets.DEVELOPMENT_MODE }}
  GOOGLE_SERVICES_API_KEY: ${{ secrets.GOOGLE_SERVICES_API_KEY }}
  AWS_S3_BUCKET: ${{ secrets.S3_BUCKET }}
  AWS_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_ACCESS_SECRET}}
  AWS_REGION: 'eu-west-1'
  SOURCE_DIR: 'tmpdir'
  SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL }}
  SLACK_COLOR: '#3278BD'
  SLACK_ICON: https://github.com/bitrise-io.png
  SLACK_MESSAGE: 'Successfull :bananadance:'
  SLACK_TITLE: Android Pipeline
  SLACK_USERNAME: ${{ secrets.SLACK_USERNAME }}
  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

jobs:
  Build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    name: Build job
    steps:
      - uses: actions/checkout@v2.3.1
        with:
          submodules: true
          fetch-depth: 0 # 0 indicates all history
      - run: git fetch --all || echo "==> Accept any result"
      - name: set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: create-google services json
        uses: jsdaniell/create-json@1.1.2
        with:
          # The name of the file to be written. | file.json 
          name: google-services.json
          # The json string that can be a secret of the github repo or a string of a json. | "{"title": "my json"}" 
          json: ${{ secrets.GOOGLE_SERVICES_JSON }}
          # Optional subfolder directory to save the json file. | src/ 
          dir: sample
                 
      - name: Build + Lint with Gradle
        run: ./gradlew assembleAndroidTest -x lint
      
      - name: upload sample app artifact
        uses: actions/upload-artifact@v2
        with:
            name: sample
            path: sample/build/outputs/apk/androidTest/debug/sample-debug-androidTest.apk

#       - name: upload emarsys-sdk test apk artifact
#         uses: actions/upload-artifact@v2
#         with:
#             name: core-api
#             path: core-api/build/outputs/apk/androidTest/debug/core-api-debug-androidTest.apk

      - name: upload emarsys-sdk test apk artifact
        uses: actions/upload-artifact@v2
        with:
            name: core
            path: core/build/outputs/apk/androidTest/debug/core-debug-androidTest.apk

#       - name: upload emarsys-sdk test apk artifact
#         uses: actions/upload-artifact@v2
#         with:
#             name: mobile-engage-api
#             path: mobile-engage-api/build/outputs/apk/androidTest/debug/mobile-engage-api-debug-androidTest.apk

      - name: upload emarsys-sdk test apk artifact
        uses: actions/upload-artifact@v2
        with:
            name: mobile-engage
            path: mobile-engage/build/outputs/apk/androidTest/debug/mobile-engage-debug-androidTest.apk

#       - name: upload emarsys-sdk test apk artifact
#         uses: actions/upload-artifact@v2
#         with:
#             name: predict-api
#             path: predict-api/build/outputs/apk/androidTest/debug/predict-api-debug-androidTest.apk

      - name: upload emarsys-sdk test apk artifact
        uses: actions/upload-artifact@v2
        with:
            name: predict
            path: predict/build/outputs/apk/androidTest/debug/predict-debug-androidTest.apk

      - name: upload emarsys-sdk test apk artifact
        uses: actions/upload-artifact@v2
        with:
            name: emarsys
            path: emarsys/build/outputs/apk/androidTest/debug/emarsys-debug-androidTest.apk

      - name: upload emarsys-sdk test apk artifact
        uses: actions/upload-artifact@v2
        with:
            name: emarsys-sdk
            path: emarsys-sdk/build/outputs/apk/androidTest/debug/emarsys-sdk-debug-androidTest.apk

      - name: create testlab services json
        uses: jsdaniell/create-json@1.1.2
        with:
          # The name of the file to be written. | file.json 
          name: sacc_key.json
          # The json string that can be a secret of the github repo or a string of a json. | "{"title": "my json"}" 
          json: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}

  CreateReleaseApk:
    name: Create release apk
    needs: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.1
        with:
          submodules: true
          fetch-depth: 0 # 0 indicates all history
      - run: git fetch --all || echo "==> Accept any result"

      - name: create-google services json
        uses: jsdaniell/create-json@1.1.2
        with:
          # The name of the file to be written. | file.json
          name: google-services.json
          # The json string that can be a secret of the github repo or a string of a json. | "{"title": "my json"}"
          json: ${{ secrets.GOOGLE_SERVICES_JSON }}
          dir: sample

      - name: Create release keystore file
        shell: bash
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE }}" > mobile-team-android.jks.asc
                    gpg -d --passphrase "${{ secrets.ANDROID_GPG_PASSWORD }}" --batch mobile-team-android.jks.asc > sample/mobile-team-android.jks

      - name: Release sample app with Gradle
        run: ./gradlew assembleRelease

      - name: Upload APK
        uses: actions/upload-artifact@v2
        with:
           name: mobile-sdk-sample
           path: sample/build/outputs/apk/release/sample-release.apk


#   TestCoreApi:
#     name: Run core-api tests on Firebase
#     needs: Build
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v2.3.1
#         with:
#           submodules: true
#           fetch-depth: 0 # 0 indicates all history
#       - run: git fetch --all || echo "==> Accept any result"

#       - name: Download sample app
#         uses: actions/download-artifact@v2
#         with:
#           name: sample 
      
#       - name: Download core-api tests
#         uses: actions/download-artifact@v2
#         with:
#           name: core-api

#       - name: Run tests
#         uses: asadmansr/Firebase-Test-Lab-Action@v1.0
#         with:
#           arg-spec: 'testWithAllDevices.yml:core-api'
#         env:
#           SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
#
#  TestCore:
#    name: Run core tests on Firebase
#    needs: Build
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2.3.1
#        with:
#          submodules: true
#          fetch-depth: 0 # 0 indicates all history
#      - run: git fetch --all || echo "==> Accept any result"
#
#      - name: Download sample app
#        uses: actions/download-artifact@v2
#        with:
#          name: sample
#
#      - name: Download core tests
#        uses: actions/download-artifact@v2
#        with:
#          name: core
#
#      - name: Run tests
#        uses: asadmansr/Firebase-Test-Lab-Action@v1.0
#        with:
#          arg-spec: 'testWithAllDevices.yml:core'
#        env:
#          SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
#
##   TestMobileEngageApi:
##     name: Run mobile-engage-api tests on Firebase
##     needs: Build
##     runs-on: ubuntu-latest
##     steps:
##       - uses: actions/checkout@v2.3.1
##         with:
##           submodules: true
##           fetch-depth: 0 # 0 indicates all history
##       - run: git fetch --all || echo "==> Accept any result"
#
##       - name: Download sample app
##         uses: actions/download-artifact@v2
##         with:
##           name: sample
#
##       - name: Download core tests
##         uses: actions/download-artifact@v2
##         with:
##           name: mobile-engage-api
#
##       - name: Run tests
##         uses: asadmansr/Firebase-Test-Lab-Action@v1.0
##         with:
##           arg-spec: 'testWithAllDevices.yml:mobile-engage-api'
##         env:
##           SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
#
#  TestMobileEngage:
#    name: Run mobile-engage tests on Firebase
#    needs: Build
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2.3.1
#        with:
#          submodules: true
#          fetch-depth: 0 # 0 indicates all history
#      - run: git fetch --all || echo "==> Accept any result"
#
#      - name: Download sample app
#        uses: actions/download-artifact@v2
#        with:
#          name: sample
#
#      - name: Download core tests
#        uses: actions/download-artifact@v2
#        with:
#          name: mobile-engage
#
#      - name: Run tests
#        uses: asadmansr/Firebase-Test-Lab-Action@v1.0
#        with:
#          arg-spec: 'testWithAllDevices.yml:mobile-engage'
#        env:
#          SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
#
##   TestPredictApi:
##     name: Run predict-api tests on Firebase
##     needs: Build
##     runs-on: ubuntu-latest
##     steps:
##       - uses: actions/checkout@v2.3.1
##         with:
##           submodules: true
##           fetch-depth: 0 # 0 indicates all history
##       - run: git fetch --all || echo "==> Accept any result"
#
##       - name: Download sample app
##         uses: actions/download-artifact@v2
##         with:
##           name: sample
#
##       - name: Download core tests
##         uses: actions/download-artifact@v2
##         with:
##           name: predict-api
#
##       - name: Run tests
##         uses: asadmansr/Firebase-Test-Lab-Action@v1.0
##         with:
##           arg-spec: 'testWithAllDevices.yml:predict-api'
##         env:
##           SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
#
#  TestPredict:
#    name: Run predict tests on Firebase
#    needs: Build
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2.3.1
#        with:
#          submodules: true
#          fetch-depth: 0 # 0 indicates all history
#      - run: git fetch --all || echo "==> Accept any result"
#
#      - name: Download sample app
#        uses: actions/download-artifact@v2
#        with:
#          name: sample
#
#      - name: Download core tests
#        uses: actions/download-artifact@v2
#        with:
#          name: predict
#
#      - name: Run tests
#        uses: asadmansr/Firebase-Test-Lab-Action@v1.0
#        with:
#          arg-spec: 'testWithAllDevices.yml:predict'
#        env:
#          SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
#
#  TestEmarsysSDK:
#    name: Run emarsys-sdk tests on Firebase
#    needs: Build
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2.3.1
#        with:
#          submodules: true
#          fetch-depth: 0 # 0 indicates all history
#      - run: git fetch --all || echo "==> Accept any result"
#
#      - name: Download sample app
#        uses: actions/download-artifact@v2
#        with:
#          name: sample
#
#      - name: Download emarsys-sdk tests
#        uses: actions/download-artifact@v2
#        with:
#          name: emarsys-sdk
#
#      - name: Display structure of downloaded files
#        run: ls -R
#
#      - name: Run tests
#        uses: asadmansr/Firebase-Test-Lab-Action@v1.0
#        with:
#          arg-spec: 'testWithAllDevices.yml:emarsys-sdk'
#        env:
#          SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
#
#  TestEmarsys:
#      name: Run emarsys tests on Firebase
#      needs: Build
#      runs-on: ubuntu-latest
#      steps:
#        - uses: actions/checkout@v2.3.1
#          with:
#            submodules: true
#            fetch-depth: 0 # 0 indicates all history
#        - run: git fetch --all || echo "==> Accept any result"
#
#        - name: Download sample app
#          uses: actions/download-artifact@v2
#          with:
#            name: sample
#
#        - name: Download core tests
#          uses: actions/download-artifact@v2
#          with:
#            name: emarsys
#
#        - name: Run tests
#          uses: asadmansr/Firebase-Test-Lab-Action@v1.0
#          with:
#            arg-spec: 'testWithAllDevices.yml:emarsys'
#          env:
#            SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
#
#  ReleaseSample:
#      name: Release sample app
#      runs-on: ubuntu-latest
#      needs: [Build, TestCore, TestMobileEngage, TestPredict, TestEmarsysSDK, TestEmarsys, CreateReleaseApk]
##       needs: [Build, TestCoreApi, TestCore, TestMobileEngageApi, TestMobileEngage, TestPredictApi, TestPredict, TestEmarsysSDK, TestEmarsys]
#      steps:
#         - uses: actions/checkout@v2.3.1
#           with:
#              submodules: true
#              fetch-depth: 0 # 0 indicates all history
#         - run: git fetch --all || echo "==> Accept any result"
##
##         - name: create-google services json
##           uses: jsdaniell/create-json@1.1.2
##           with:
##               # The name of the file to be written. | file.json
##               name: google-services.json
##               # The json string that can be a secret of the github repo or a string of a json. | "{"title": "my json"}"
##               json: ${{ secrets.GOOGLE_SERVICES_JSON }}
##               # Optional subfolder directory to save the json file. | src/
##               dir: sample
##
##         - name: Create release keystore file
##           shell: bash
##           run: |
##             echo "${{ secrets.ANDROID_KEYSTORE }}" > mobile-team-android.jks.asc
##                       gpg -d --passphrase "${{ secrets.ANDROID_GPG_PASSWORD }}" --batch mobile-team-android.jks.asc > sample/mobile-team-android.jks
##
##         - name: Release sample app with Gradle
##           run: ./gradlew assembleRelease
#
##          - name: Upload APK
##            uses: actions/upload-artifact@v2
##            with:
##               name: mobile-sdk-sample
##               path: sample/build/outputs/apk/release/sample-release.apk
#
#
#
#         - name: Download sample app
#           uses: actions/download-artifact@v2
#           with:
#             name: mobile-sdk-sample
#             path: tmpdir
#
##        - name: Move release apk to folder
##          shell: bash
##          run: |
##            mkdir tmpdir
##            mv mobile-sdk-sample tmpdir/sample-release.apk
#
#         - name: upload to s3
#           uses: jakejarvis/s3-sync-action@master
#           with:
#            args: --acl public-read --follow-symlinks
#
#  SlackNotification:
#    name: Send slack notification
#    runs-on: ubuntu-latest
#    needs: [ReleaseSample]
#    steps:
#      - name: Slack Notification
#        uses: rtCamp/action-slack-notify@master

