name: Release On Tag

on:
  workflow_dispatch:
  push:
    tags:
      - '*'

env:
  RELEASE_KEY_PASSWORD:  ${{ secrets.ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD }}
  RELEASE_KEY_ALIAS:  ${{ secrets.ANDROID_KEYSTORE_ALIAS }}
  RELEASE_STORE_PASSWORD:  ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
  RELEASE_STORE_FILE: ${{ secrets.RELEASE_STORE_FILE }}
  DEVELOPMENT_MODE: ${{ secrets.DEVELOPMENT_MODE }}
  GOOGLE_SERVICES_API_KEY: ${{ secrets.GOOGLE_SERVICES_API_KEY }}
  AWS_S3_BUCKET: ${{ secrets.S3_BUCKET }}
  AWS_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_ACCESS_SECRET}}
  AWS_REGION: 'eu-west-1'
  SOURCE_DIR: 'tmpdir'
  SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL }}
  SLACK_ICON: https://icons.iconarchive.com/icons/martz90/circle/256/android-icon.png
  SLACK_TITLE: Android Pipeline
  SLACK_USERNAME: ${{ secrets.SLACK_USERNAME }}
  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

jobs:
  Release:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    name: Build job
    steps:
      - uses: actions/checkout@v2.3.1
        with:
          submodules: true
          fetch-depth: 0 # 0 indicates all history
      - run: git fetch --all || echo "==> Accept any result"
      - name: set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: create-google services json
        uses: jsdaniell/create-json@1.1.2
        with:
          # The name of the file to be written. | file.json 
          name: google-services.json
          # The json string that can be a secret of the github repo or a string of a json. | "{"title": "my json"}" 
          json: ${{ secrets.GOOGLE_SERVICES_JSON }}
          # Optional subfolder directory to save the json file. | src/ 
          dir: sample

      - name: Create file 'FAILURE.TXT' and write 'false' into it
        run: echo 'false' > FAILURE.TXT

      - name: Upload file 'FAILURE.TXT' as an artifact
        uses: actions/upload-artifact@v1
        with:
          name: failure_file
          path: FAILURE.TXT

      # TODO UNCOMMENT THIS
#      - name: Release with Gradle
#        run: ./gradlew clean build -x lint -x test release

      - name: Create file 'FAILURE.TXT' and write 'true' into it
        if: ${{ failure() }}
        run: echo 'true' > FAILURE.TXT

      - name: Upload file 'FAILURE.TXT' as an artifact
        if: ${{ failure() }}
        uses: actions/upload-artifact@v1
        with:
          name: failure_file
          path: FAILURE.TXT

  CreateSampleReleaseBundle:
    name: Create release bundle
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.1
        with:
          submodules: true
          fetch-depth: 0 # 0 indicates all history
      - run: git fetch --all || echo "==> Accept any result"

      - name: create-google services json
        uses: jsdaniell/create-json@1.1.2
        with:
          # The name of the file to be written. | file.json
          name: google-services.json
          # The json string that can be a secret of the github repo or a string of a json. | "{"title": "my json"}"
          json: ${{ secrets.GOOGLE_SERVICES_JSON }}
          dir: sample

      - name: Create release keystore file
        shell: bash
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE }}" > mobile-team-android.jks.asc
                    gpg -d --passphrase "${{ secrets.ANDROID_GPG_PASSWORD }}" --batch mobile-team-android.jks.asc > sample/mobile-team-android.jks

      - name: Create release sample app with Gradle
        run: ./gradlew :sample:bundleRelease

      - name: Upload bundle
        uses: actions/upload-artifact@v2
        with:
          name: mobile-sdk-sample
          path: sample/build/outputs/bundle/release/sample-release.aab

      - name: Create file 'FAILURE.TXT' and write 'true' into it
        if: ${{ failure() }}
        run: echo 'true' > FAILURE.TXT

      - name: Upload file 'FAILURE.TXT' as an artifact
        if: ${{ failure() }}
        uses: actions/upload-artifact@v1
        with:
          name: failure_file
          path: FAILURE.TXT

  ReleaseSample:
    name: Release sample app
    runs-on: ubuntu-latest
    needs: [Release, CreateSampleReleaseBundle]
    steps:
      - uses: actions/checkout@v2.3.1
        with:
          submodules: true
          fetch-depth: 0 # 0 indicates all history
      - run: git fetch --all || echo "==> Accept any result"

      - name: Download sample app
        uses: actions/download-artifact@v2
        with:
          name: mobile-sdk-sample
          path: tmpdir

      #TODO delete this step
      - name: upload to s3
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read --follow-symlinks

      - name: create-google services json
        uses: jsdaniell/create-json@1.1.2
        with:
          name: google-play-services.json
          json: ${{ secrets.GOOGLE_PLAY_STORE_SEVICE_ACCOUNT_JSON }}

      - name: Playstore upload
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJson: google-play-services.json
          packageName: com.emarsys.sample
          releaseFile: tmpdir/sample-release.aab
          track: alpha

      - name: Create file 'FAILURE.TXT' and write 'true' into it
        if: ${{ failure() }}
        run: echo 'true' > FAILURE.TXT

      - name: Upload file 'FAILURE.TXT' as an artifact
        if: ${{ failure() }}
        uses: actions/upload-artifact@v1
        with:
          name: failure_file
          path: FAILURE.TXT

  SlackNotification:
    name: Send slack notification
    runs-on: ubuntu-latest
    needs: [ReleaseSample]
    steps:
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@master
        env:
          SLACK_COLOR: '#32BD32'
          SLACK_MESSAGE: 'Release successful! :man-gesturing-ok:'

  SlackNotificationOnError:
    name: Send slack on error
    runs-on: ubuntu-latest
    needs: [ReleaseSample]
    if: always()
    steps:
      - uses: actions/checkout@v2.3.1
        with:
          submodules: true
          fetch-depth: 0 # 0 indicates all history
      - run: git fetch --all || echo "==> Accept any result"

      - name: Download file 'FAILURE.TXT' from artifact
        uses: actions/download-artifact@v1
        with:
          name: failure_file

      - name: Read file 'FAILURE.TXT' and set output parameter
        id: set_output
        run: echo "::set-output name=FAILURE::$(<failure_file/FAILURE.TXT)"

      - name: Slack Notification
        if: steps.set_output.outputs.FAILURE == 'true'
        uses: rtCamp/action-slack-notify@master
        env:
          SLACK_COLOR: '#FF3C00'
          SLACK_MESSAGE:
            'Release failed! :man-gesturing-no:'